#!/usr/bin/env python3
import modules.PySimpleGUI as sg
import json
from modules.persistence import QuizQuestion, is_silly

changes = False
questionList = []

mainWindowLayout = [
    [sg.Text("Title of Quiz:"), sg.InputText(key='quiz_name', tooltip="The title that players will see.")],
    [sg.Listbox(questionList, size=(125, 25), key='quizquestionentry', enable_events=True, tooltip="A list of the questions."),
     sg.Text(key='textbox', size=(20, 10))],
    [sg.Button('Open', tooltip="Open an existing quiz."), sg.Button('Save', tooltip="Save your quiz in an appropriate folder."),
     sg.Button("Edit Question", tooltip="Select a question from the listbox to edit it."), sg.Button("Add Question", tooltip="Add a new question."),
     sg.Button('Duplicate Question', tooltip="Duplicate the selected question"), sg.Button("Delete Question", tooltip="Select a question from the listbox to delete.")],
    [sg.Button('Quit')]
]

mainWindow = sg.Window('Quiz Creator', mainWindowLayout, return_keyboard_events=True, finalize = True, use_default_focus=False)

def make_questionEditorWindow():
    questionEditorLayout = [
        [sg.Text('Enter the question:'), sg.InputText(key='question', tooltip="Enter the question.")],
        [sg.Text('Enter the correct answer:'), sg.InputText(key='correct_answer', tooltip="Enter the answer.")],
        [sg.Text('Enter the wrong answers:'), sg.InputText(key='wrong_answers', tooltip="Enter some related but incorrect answers, separated by commas.")],
        [sg.Text('Enter the time given to answer:'), sg.InputText(key='time_given', tooltip="Enter an integer number of seconds. Average is 10-20.")],
        [sg.Button('Add'), sg.Button('Cancel')]
    ]

    questionEditorWindow = sg.Window('Question Editor', questionEditorLayout, finalize=True)
    return questionEditorWindow

while True:
    event, values = mainWindow.read()

    if event == 'quizquestionentry':
        changes = True
        if len(values['quizquestionentry']) > 0:
            answers = ("correct answer:", values['quizquestionentry'][0].correctAnswer, "wrong answers:", values['quizquestionentry'][0].wrongAnswers)
            outputtext = "Correct answer: \n" + answers[1] + "\n Wrong answers:\n" + str(answers[3])
            mainWindow["textbox"].update(outputtext)

    if event == sg.WIN_CLOSED or event == 'Quit' or event == 'Escape:27':
        if changes:
            if sg.popup_yes_no("You have unsaved changes! Are you sure you want to leave?") == "Yes":
                print("Bye...")
                break
            else:
                continue
        print("Bye...")
        break

    if event == 'Edit Question' or event == 'e':
        try:
            index = int(''.join(map(str, mainWindow["quizquestionentry"].get_indexes())))
            quizQuestion = questionList[index]
        except ValueError:
            sg.Popup("Select a message to edit!")
            continue

        questionEditorWindow = make_questionEditorWindow()
        questionEditorWindow['question'].update(quizQuestion.question)
        questionEditorWindow['correct_answer'].update(quizQuestion.correctAnswer)
        questionEditorWindow['wrong_answers'].update(','.join(str(e) for e in quizQuestion.wrongAnswers))
        questionEditorWindow['time_given'].update(quizQuestion.timeout)
        editorEvent, editorValues = questionEditorWindow.read()
        if editorEvent == 'Add':
            question = editorValues['question']
            correct_answer = editorValues['correct_answer']
            wrong_answers = editorValues['wrong_answers'].split(',')
            try:
                time_given = int(editorValues['time_given'])
            except ValueError:
                time_given = 15
            newquestion = QuizQuestion(question, correct_answer, wrong_answers, int(editorValues['time_given']))
            newquestion = QuizQuestion(question, correct_answer, wrong_answers, 15)
            is_silly_question, reason = is_silly(question, correct_answer, wrong_answers, questionList)
            if is_silly_question:
                sg.Popup(f"Silly question detected: {reason}")
                continue
            else:
                questionList[index] = newquestion
                questionEditorWindow.close()
                mainWindow["quizquestionentry"].update(questionList)
        if editorEvent == 'Cancel':
            questionEditorWindow.close()

    if event == 'Add Question' or event == 'a':
        questionEditorWindow = make_questionEditorWindow()
        editorEvent, editorValues = questionEditorWindow.read()
        if editorEvent == 'Add':
            question = editorValues['question']
            correct_answer = editorValues['correct_answer']
            wrong_answers = editorValues['wrong_answers'].split(',')
            try:
                time_given = int(editorValues['time_given'])
            except ValueError:
                time_given = 15
            newquestion = QuizQuestion(question, correct_answer, wrong_answers, time_given)
            is_silly_question, reason = is_silly(question, correct_answer, wrong_answers, questionList)
            if is_silly_question:
                sg.Popup(f"Silly question detected: {reason}")
                pass
            else:
                questionList.append(newquestion)
                questionEditorWindow.close()
                mainWindow["quizquestionentry"].update(questionList)
        if editorEvent == 'Cancel':
            questionEditorWindow.close()

    if event == 'Duplicate Question' or event == 'd':
        try:
            index = int(''.join(map(str, mainWindow["quizquestionentry"].get_indexes())))
            quizQuestion = questionList[index]
            new_question = QuizQuestion(quizQuestion.question, quizQuestion.correctAnswer, quizQuestion.wrongAnswers, quizQuestion.timeout)
            questionList.append(new_question)
            mainWindow["quizquestionentry"].update(questionList)
        except ValueError:
            sg.Popup("Select a question to duplicate!")

    if event == 'Save' or event == 's':
        changes = False
        filename = sg.popup_get_file('', save_as=True, no_window=True, initial_folder="quizzes",
                                     file_types=(("All JSON Files", "*.json"), ("All Files", "*.*")))
        with open(f'{filename}', 'w') as file:
            try:
                savedData = {"title": values['quiz_name'], "listOfQuestions": questionList, "time given": editorValues['time_given']}
            except NameError:
                savedData = {"title": values['quiz_name'], "listOfQuestions": questionList, "time given": 15}

            print("saveddata:", savedData)
            json.dump(savedData, file, default=vars)

    if event == 'Open' or event == 'o':
        if changes:
            if sg.popup_yes_no("You have unsaved changes! Are you sure you want to leave?") == "Yes":
                pass
            else:
                continue
        try:
            filename = sg.popup_get_file("Open quiz", initial_folder="quizzes", no_window=True)
            with open(filename, 'r') as file:
                try:
                    quizDicts = json.load(file)
                    questionList = []
                    for q in quizDicts["listOfQuestions"]:
                        qq = QuizQuestion(**q)
                        is_silly_question, reason = is_silly(qq.question, qq.correctAnswer, qq.wrongAnswers, questionList)
                        if is_silly_question:
                            sg.Popup(f"Silly question detected: {reason}")
                            break
                        questionList.append(qq)
                    mainWindow["quizquestionentry"].update(questionList)
                    titleofquiz = quizDicts["title"]
                    mainWindow["quiz_name"].update(titleofquiz)
                except Exception as e:
                    sg.Popup(f"Error with this file! {e}")

        except TypeError:
            ...

    if event == 'Delete Question' or event == 'Delete':
        try:
            index = int(''.join(map(str, mainWindow["quizquestionentry"].get_indexes())))
            questionList.pop(index)
        except ValueError:
            sg.Popup("Select a message to delete!")

        mainWindow["quizquestionentry"].update(questionList)

mainWindow.close()
